<%
 trackers = Array(trackers)
 roles = Array(roles)
 minimal = false if local_assigns[:minimal].nil?
 issue ||= nil
%>
<% if trackers.length == 1 %>
  <%= javascript_include_tag "d3.v3.min.js", :plugin => :redmine_workflow_enhancements %>
  <%= javascript_include_tag "dagre-d3.min.js", :plugin => :redmine_workflow_enhancements %>
  <%= javascript_include_tag "saveSvgAsPng.js", :plugin => :redmine_workflow_enhancements %>

  <div class="<%= minimal ? "" : "box" %>">
    <% unless minimal %>
      <div class="contextual" style="display:none;" id="graphContextual">
        <a class="icon icon-save" id="graphSavePng"><%= l(:button_save) %></a>
      </div>
    <% end %>
    <h4 style="<%= minimal ? "display:none;" : '' %>">
      <%= l(:label_workflow) %>: <%= trackers.first.name %>
      <% unless roles.empty? %>
        - <%= roles.length == 1 ? l(:label_role) : l(:label_role_plural) %>:
        <%= roles.map(&:name).join(', ') %>
      <% end %>
    </h4>
    <div class="workflowGraph">
      <svg id="workflow-vis">
        <g transform="translate(2,2)"/>
      </svg>
    </div>
  </div>

  <script type="text/javascript">
  $(function() {
    var json = <%= WorkflowEnhancements::Graph.load_data(roles, trackers, issue).to_json.html_safe %>;

    var renderer = new dagreD3.Renderer();
    var oldDrawNodes = renderer.drawNodes();
    renderer.drawNodes(function(graph, root) {
      var svgNodes = oldDrawNodes(graph, root);
      svgNodes.attr("id", function(u) { return "node-" + u; });
      svgNodes.attr('class', function(u) {
        var cls = graph.node(u).nodeclass || '';
        return 'node ' + cls;
      });
      return svgNodes;
    });

    var oldDrawEdgePaths = renderer.drawEdgePaths();
    renderer.drawEdgePaths(function(graph, root) {
      var svgEdgePaths = oldDrawEdgePaths(graph, root);
      svgEdgePaths.attr('class', function(u) {
        var cls = graph.edge(u).edgeclass || '';
        return 'edgePath ' + cls;
      });
      return svgEdgePaths;
    });

    var layout = dagreD3.layout()
      .edgeSep(12)
      .nodeSep(40)
      .rankSep(50)
      .rankDir("LR");
    layout = renderer.layout(layout).run(dagreD3.json.decode(json.nodes, json.edges), d3.select("#workflow-vis g"));

    var cw = $('div#content').width();
    var dw = $('.workflowGraph').width();
    var t = cw >= 900 ? 20 : 5;
    var gw = layout.graph().width + 2*t
    var gh = layout.graph().height + 2*t
    var w = Math.min(cw - 20, gw);
    if (dw < cw && dw > gw) {
      w = dw;
    }
    var h = Math.min($(window).height(), gh);
    var sw = w / gw;
    var sh = h / gh;
    var s = 1;
    if (sw < 1 || sh < 1) {
      if (sw < sh) {
        s = sw;
        h = w * gh / gw;
      } else {
        s = sh;
        w = h * gw / gh;
      }
    }

    $('#workflow-vis').attr('width', w).attr('height', h)
    var transform = 'translate(' + t + ',' + t + ')';
    if (s < 1) {
      transform += 'scale(' + s + ')';
    }
    d3.select("#workflow-vis g").attr("transform", transform);

    <% unless minimal %>
      // save as PNG only works in Firefox and Chrome
      if (/firefox/i.test(navigator.userAgent) || /chrome/i.test(navigator.userAgent)) {
        $('#graphContextual').show();
        $('#graphSavePng').click(function() {
          saveSvgAsPng(document.getElementById("workflow-vis"), "workflow.png", 3);
        });
      }
    <% end %>
  });
  </script>
<% end %>

